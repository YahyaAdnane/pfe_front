{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\zbook\\\\Desktop\\\\eSignature app\\\\pfe-front\\\\src\\\\auth\\\\AuthProvider.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null); // infos utilisateur\n  const [token, setToken] = useState(null); // si un jour tu ajoutes JWT\n\n  // Restaurer la session au refresh\n  useEffect(() => {\n    const saved = localStorage.getItem(\"auth:user\");\n    if (saved) {\n      try {\n        setUser(JSON.parse(saved));\n      } catch {}\n    }\n  }, []);\n  useEffect(() => {\n    if (user) localStorage.setItem(\"auth:user\", JSON.stringify(user));else localStorage.removeItem(\"auth:user\");\n  }, [user]);\n\n  // ------------------ LOGIN ------------------\n  const login = async credentials => {\n    var _data$user;\n    // normaliser l'email côté front (optionsnel mais utile)\n    const payload = {\n      email: String(credentials.email || \"\").trim().toLowerCase(),\n      password: credentials.password\n    };\n    const res = await fetch(\"http://localhost:5000/api/login\", {\n      // ✅ bonne route\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(payload)\n    });\n    const data = await res.json().catch(() => ({}));\n    if (!res.ok) {\n      // renvoyer le vrai message du backend: \"Utilisateur non trouvé\" / \"Mot de passe incorrect\" / etc.\n      throw new Error(data.message || \"Erreur de connexion\");\n    }\n\n    // ton backend renvoie { message, user } → on prend user\n    const u = (_data$user = data.user) !== null && _data$user !== void 0 ? _data$user : data;\n    setUser(u);\n\n    // si tu ajoutes un token plus tard:\n    // if (data.token) { setToken(data.token); localStorage.setItem(\"auth:token\", data.token); }\n\n    return u;\n  };\n\n  // (option) register via provider, si tu veux l'utiliser depuis SignUpForm\n  const register = async ({\n    name,\n    email,\n    jobTitle,\n    password\n  }) => {\n    const res = await fetch(\"http://localhost:5000/api/users/register\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name,\n        email,\n        jobTitle,\n        password\n      })\n    });\n    const data = await res.json().catch(() => ({}));\n    if (!res.ok) throw new Error(data.message || \"Inscription échouée\");\n    return data; // on ne connecte pas automatiquement ici\n  };\n  const isAdmin = () => (user === null || user === void 0 ? void 0 : user.role) === \"admin\";\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem(\"auth:user\");\n    localStorage.removeItem(\"auth:token\");\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      register,\n      isAdmin,\n      logout,\n      token,\n      setToken\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"90zAo1h6WlJ02tR/rSFGLd6mXtc=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","token","setToken","saved","localStorage","getItem","JSON","parse","setItem","stringify","removeItem","login","credentials","_data$user","payload","email","String","trim","toLowerCase","password","res","fetch","method","headers","body","data","json","catch","ok","Error","message","u","register","name","jobTitle","isAdmin","role","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/zbook/Desktop/eSignature app/pfe-front/src/auth/AuthProvider.jsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);      // infos utilisateur\r\n  const [token, setToken] = useState(null);    // si un jour tu ajoutes JWT\r\n\r\n  // Restaurer la session au refresh\r\n  useEffect(() => {\r\n    const saved = localStorage.getItem(\"auth:user\");\r\n    if (saved) {\r\n      try { setUser(JSON.parse(saved)); } catch {}\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    if (user) localStorage.setItem(\"auth:user\", JSON.stringify(user));\r\n    else localStorage.removeItem(\"auth:user\");\r\n  }, [user]);\r\n\r\n  // ------------------ LOGIN ------------------\r\n  const login = async (credentials) => {\r\n    // normaliser l'email côté front (optionsnel mais utile)\r\n    const payload = {\r\n      email: String(credentials.email || \"\").trim().toLowerCase(),\r\n      password: credentials.password,\r\n    };\r\n\r\n    const res = await fetch(\"http://localhost:5000/api/login\", {   // ✅ bonne route\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(payload),\r\n    });\r\n\r\n    const data = await res.json().catch(() => ({}));\r\n    if (!res.ok) {\r\n      // renvoyer le vrai message du backend: \"Utilisateur non trouvé\" / \"Mot de passe incorrect\" / etc.\r\n      throw new Error(data.message || \"Erreur de connexion\");\r\n    }\r\n\r\n    // ton backend renvoie { message, user } → on prend user\r\n    const u = data.user ?? data;\r\n    setUser(u);\r\n\r\n    // si tu ajoutes un token plus tard:\r\n    // if (data.token) { setToken(data.token); localStorage.setItem(\"auth:token\", data.token); }\r\n\r\n    return u;\r\n  };\r\n\r\n  // (option) register via provider, si tu veux l'utiliser depuis SignUpForm\r\n  const register = async ({ name, email, jobTitle, password }) => {\r\n    const res = await fetch(\"http://localhost:5000/api/users/register\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ name, email, jobTitle, password }),\r\n    });\r\n    const data = await res.json().catch(() => ({}));\r\n    if (!res.ok) throw new Error(data.message || \"Inscription échouée\");\r\n    return data; // on ne connecte pas automatiquement ici\r\n  };\r\n\r\n  const isAdmin = () => user?.role === \"admin\";\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setToken(null);\r\n    localStorage.removeItem(\"auth:user\");\r\n    localStorage.removeItem(\"auth:token\");\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, register, isAdmin, logout, token, setToken }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}