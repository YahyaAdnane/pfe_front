{"ast":null,"code":"const login = async credentials => {\n  try {\n    const response = await fetch(\"http://localhost:5000/api/users/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(credentials)\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(errorText || \"Invalid credentials\");\n    }\n    const userData = await response.json();\n    setUser(userData);\n    return userData;\n  } catch (error) {\n    console.error(\"Login error:\", error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["login","credentials","response","fetch","method","headers","body","JSON","stringify","ok","errorText","text","Error","userData","json","setUser","error","console","message"],"sources":["C:/Users/zbook/Desktop/eSignature app/pfe-front/src/auth/AuthProvider.jsx"],"sourcesContent":["const login = async (credentials) => {\r\n  try {\r\n    const response = await fetch(\"http://localhost:5000/api/users/login\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(credentials),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      throw new Error(errorText || \"Invalid credentials\");\r\n    }\r\n\r\n    const userData = await response.json();\r\n    setUser(userData);\r\n    return userData;\r\n\r\n  } catch (error) {\r\n    console.error(\"Login error:\", error.message);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAMA,KAAK,GAAG,MAAOC,WAAW,IAAK;EACnC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;MACpEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,WAAW;IAClC,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,IAAI,qBAAqB,CAAC;IACrD;IAEA,MAAMG,QAAQ,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;IACtCC,OAAO,CAACF,QAAQ,CAAC;IACjB,OAAOA,QAAQ;EAEjB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAACE,OAAO,CAAC;IAC5C,MAAMF,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}