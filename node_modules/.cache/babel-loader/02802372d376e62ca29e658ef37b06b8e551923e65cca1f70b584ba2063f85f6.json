{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adnan\\\\eSignature app\\\\pfe-front\\\\src\\\\auth\\\\AuthProvider.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n\n  /**\r\n   * login: \r\n   *  - Calls the SignNow OAuth endpoint\r\n   *  - If successful, stores access_token, sets user\r\n   *  - Throws if invalid credentials or network error\r\n   */\n  const login = async credentials => {\n    /*try {\r\n      const response = await fetch(\"http://localhost:5143/api/signnow/auth\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          Username: credentials.email,\r\n          Password: credentials.password,\r\n        }),\r\n      });\r\n        if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error(\"Erreur login:\", errorText);\r\n        throw new Error(\"Invalid credentials\");\r\n      }\r\n        const data = await response.json();\r\n      console.log(\"Réponse login:\", data); // accède à data.access_token\r\n        // 1. Store the returned token for later use\r\n      localStorage.setItem(\"accessToken\", data.access_token);\r\n        // 2. Set a minimal user object in state. \r\n      //    You might want to decode a JWT or fetch user details separately.\r\n      const signedInUser = { email: credentials.email };\r\n      setUser(signedInUser);\r\n        return signedInUser;\r\n    } catch (error) {\r\n      console.error(\"Login error:\", error);\r\n      throw error;\r\n    }*/\n\n    // 1. Fetch your local users.json file\n    const response = await fetch(\"/users.json\");\n    if (!response.ok) {\n      throw new Error(\"Failed to load users.json\");\n    }\n\n    // 2. Parse the array of user objects\n    const users = await response.json();\n\n    // 3. Look for a user whose email/password match the credentials\n    const foundUser = users.find(u => u.email === credentials.email && u.password === credentials.password);\n\n    // 4. If no user is found, throw an error\n    if (!foundUser) {\n      throw new Error(\"Invalid credentials\");\n    }\n\n    // 5. Otherwise, set state and return the found user\n    setUser(foundUser);\n    return foundUser;\n  };\n\n  /**\r\n   * isAdmin:\r\n   *  - Assume your `user` object has a `role` field or \r\n   *    you stored role info in the token itself.\r\n   *  - Here, we simply check user.role === \"admin\".\r\n   */\n  const isAdmin = () => {\n    if (!user) return false;\n    return user.role === \"admin\";\n    // or, if the SignNow token is a JWT and contains role claims:\n    //   const token = localStorage.getItem(\"accessToken\");\n    //   decode JWT and check if \"role\":\"admin\" is present.\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem(\"accessToken\");\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      isAdmin,\n      logout,\n      token,\n      setToken\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"GjQvNlviHZiIEOgy+2FWx3ml/o0=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","token","setToken","login","credentials","response","fetch","ok","Error","users","json","foundUser","find","u","email","password","isAdmin","role","logout","localStorage","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/adnan/eSignature app/pfe-front/src/auth/AuthProvider.jsx"],"sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [token, setToken] = useState(null);\r\n\r\n  /**\r\n   * login: \r\n   *  - Calls the SignNow OAuth endpoint\r\n   *  - If successful, stores access_token, sets user\r\n   *  - Throws if invalid credentials or network error\r\n   */\r\n  const login = async (credentials) => {\r\n    /*try {\r\n      const response = await fetch(\"http://localhost:5143/api/signnow/auth\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          Username: credentials.email,\r\n          Password: credentials.password,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error(\"Erreur login:\", errorText);\r\n        throw new Error(\"Invalid credentials\");\r\n      }\r\n\r\n      const data = await response.json();\r\n      console.log(\"Réponse login:\", data); // accède à data.access_token\r\n\r\n      // 1. Store the returned token for later use\r\n      localStorage.setItem(\"accessToken\", data.access_token);\r\n\r\n      // 2. Set a minimal user object in state. \r\n      //    You might want to decode a JWT or fetch user details separately.\r\n      const signedInUser = { email: credentials.email };\r\n      setUser(signedInUser);\r\n\r\n      return signedInUser;\r\n    } catch (error) {\r\n      console.error(\"Login error:\", error);\r\n      throw error;\r\n    }*/\r\n\r\n       // 1. Fetch your local users.json file\r\n    const response = await fetch(\"/users.json\");\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to load users.json\");\r\n    }\r\n\r\n    // 2. Parse the array of user objects\r\n    const users = await response.json();\r\n\r\n    // 3. Look for a user whose email/password match the credentials\r\n    const foundUser = users.find(\r\n      (u) =>\r\n        u.email === credentials.email &&\r\n        u.password === credentials.password\r\n    );\r\n\r\n    // 4. If no user is found, throw an error\r\n    if (!foundUser) {\r\n      throw new Error(\"Invalid credentials\");\r\n    }\r\n\r\n    // 5. Otherwise, set state and return the found user\r\n    setUser(foundUser);\r\n    return foundUser;\r\n  };\r\n\r\n  /**\r\n   * isAdmin:\r\n   *  - Assume your `user` object has a `role` field or \r\n   *    you stored role info in the token itself.\r\n   *  - Here, we simply check user.role === \"admin\".\r\n   */\r\n  const isAdmin = () => {\r\n    if (!user) return false;\r\n    return user.role === \"admin\"; \r\n    // or, if the SignNow token is a JWT and contains role claims:\r\n    //   const token = localStorage.getItem(\"accessToken\");\r\n    //   decode JWT and check if \"role\":\"admin\" is present.\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem(\"accessToken\");\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, isAdmin, logout, token, setToken }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;;EAExC;AACF;AACA;AACA;AACA;AACA;EACE,MAAMW,KAAK,GAAG,MAAOC,WAAW,IAAK;IACnC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAOO;IACH,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAa,CAAC;IAC3C,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;IAC9C;;IAEA;IACA,MAAMC,KAAK,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;;IAEnC;IACA,MAAMC,SAAS,GAAGF,KAAK,CAACG,IAAI,CACzBC,CAAC,IACAA,CAAC,CAACC,KAAK,KAAKV,WAAW,CAACU,KAAK,IAC7BD,CAAC,CAACE,QAAQ,KAAKX,WAAW,CAACW,QAC/B,CAAC;;IAED;IACA,IAAI,CAACJ,SAAS,EAAE;MACd,MAAM,IAAIH,KAAK,CAAC,qBAAqB,CAAC;IACxC;;IAEA;IACAR,OAAO,CAACW,SAAS,CAAC;IAClB,OAAOA,SAAS;EAClB,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;EACE,MAAMK,OAAO,GAAGA,CAAA,KAAM;IACpB,IAAI,CAACjB,IAAI,EAAE,OAAO,KAAK;IACvB,OAAOA,IAAI,CAACkB,IAAI,KAAK,OAAO;IAC5B;IACA;IACA;EACF,CAAC;EAED,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnBlB,OAAO,CAAC,IAAI,CAAC;IACbmB,YAAY,CAACC,UAAU,CAAC,aAAa,CAAC;EACxC,CAAC;EAED,oBACE1B,OAAA,CAACC,WAAW,CAAC0B,QAAQ;IAACC,KAAK,EAAE;MAAEvB,IAAI;MAAEI,KAAK;MAAEa,OAAO;MAAEE,MAAM;MAAEjB,KAAK;MAAEC;IAAS,CAAE;IAAAL,QAAA,EAC5EA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC5B,EAAA,CA9FWF,YAAY;AAAA+B,EAAA,GAAZ/B,YAAY;AAgGzB,OAAO,MAAMgC,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMtC,UAAU,CAACI,WAAW,CAAC;AAAA;AAACkC,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}